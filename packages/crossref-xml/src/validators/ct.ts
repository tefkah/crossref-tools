import * as Primitive from  './Primitive'
// Generated by ts-to-zod
import { z } from "zod";

// Source files:
// https://data.crossref.org/schemas/clinicaltrials.xsd
export const XastAttributesSchema = z.record(z.union([z.string(), z.undefined()]).nullable());

const XastTextSchema = z.object({
    type: z.literal("text"),
    value: z.string()
});

const XastCommentSchema = z.object({
    type: z.literal("comment"),
    value: z.string()
});

const XastCDataSchema = z.object({
    type: z.literal("cdata"),
    value: z.string()
});

const XastInstructionSchema = z.object({
    type: z.literal("instruction"),
    name: z.string(),
    value: z.string()
});

const FakerXastElementSchema = z.object({
    type: z.literal("element"),
    name: z.string(),
    attributes: z.union([XastAttributesSchema, z.undefined()]).optional(),
    children: z.array(z.union([z.object({
            type: z.string(),
            name: z.string().optional(),
            attributes: z.record(z.any()).optional(),
            children: z.array(z.any())
        }), XastTextSchema, XastCommentSchema, XastInstructionSchema, XastCDataSchema]))
});

const FakeXastElementSchema = z.object({
    type: z.literal("element"),
    name: z.string(),
    attributes: z.union([XastAttributesSchema, z.undefined()]).optional(),
    children: z.array(z.union([FakerXastElementSchema, XastTextSchema, XastCommentSchema, XastInstructionSchema, XastCDataSchema]))
});

export const XastElementSchema = z.object({
    type: z.literal("element"),
    name: z.string(),
    attributes: z.union([XastAttributesSchema, z.undefined()]).optional(),
    children: z.array(z.union([FakeXastElementSchema, XastTextSchema, XastCommentSchema, XastInstructionSchema, XastCDataSchema]))
});

const XastTextElementSchema = XastElementSchema.extend({
    children: z.tuple([XastTextSchema])
});

/** The clinical trial identifier related to the article.
   * @pattern 10.18810\/[a-z-]+
  * @minLength 12
  * @maxLength 200

**/
export const RegistrySchema = XastElementSchema.extend({
    name: z.string(),
    children: z.tuple([z.object({
            type: z.literal("text"),
            /**
             * @pattern 10.18810\/[a-z-]+
             * @minLength 12
             * @maxLength 200
             **/
            value: z.string().min(12).max(200).regex(/10.18810\/[a-z-]+/)
        })])
});

/** The clinical trial identifier related to the article.
   * @pattern 10.18810\/[a-z-]+
  * @minLength 12
  * @maxLength 200

**/
export const ClinicalTrialnumberRegistrySchema = z.string().min(12).max(200).regex(/10.18810\/[a-z-]+/);

/** Used to identify the article publication date in relation to the issuance of the trial results
 **/
export const ClinicalTrialnumberTypeSchema = z.union([z.literal("preResults"), z.literal("results"), z.literal("postResults")]);

export const ClinicalTrialnumberSchema = XastElementSchema.extend({
    type: z.literal("element"),
    name: z.literal("clinical-trial-number"),
    attributes: z.object({
        /** The clinical trial identifier related to the article.
         **/
        registry: z.string(),
        /** Used to identify the article publication date in relation to the issuance of the trial results
         **/
        type: ClinicalTrialnumberTypeSchema.optional()
    }),
    /** XastElement is self-closing */
    children: z.tuple([])
});

/** Accommodates deposit of linked clincal trials metadata. The clinical-trial-number value will
 * be a string that must match a specific pattern appropriate for a given clinical trial registry. The
 * registry is identified in the required attribute 'registry' and must be the DOI of a recognized registry
 * (see http://dx.doi.org/10.18810/registries)
 **/
export const ProgramSchema = XastElementSchema.extend({
    type: z.literal("element"),
    name: z.literal("program"),
    children: z.array(ClinicalTrialnumberSchema)
});
