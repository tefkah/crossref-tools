import * as Primitive from './Primitive'
// Generated by ts-to-zod
import { z } from 'zod'
import { Assertion } from '../types/www.crossref.org/fundref.xsd.d'

// Source files:
// https://data.crossref.org/schemas/fundref.xsd
export const XastAttributesSchema = z.record(z.union([z.string(), z.undefined()]).nullable())

const XastTextSchema = z.object({
  type: z.literal('text'),
  value: z.string(),
})

const XastCommentSchema = z.object({
  type: z.literal('comment'),
  value: z.string(),
})

const XastCDataSchema = z.object({
  type: z.literal('cdata'),
  value: z.string(),
})

const XastInstructionSchema = z.object({
  type: z.literal('instruction'),
  name: z.string(),
  value: z.string(),
})

const FakerXastElementSchema = z.object({
  type: z.literal('element'),
  name: z.string(),
  attributes: z.union([XastAttributesSchema, z.undefined()]).optional(),
  children: z.array(
    z.union([
      z.object({
        type: z.string(),
        name: z.string().optional(),
        attributes: z.record(z.any()).optional(),
        children: z.array(z.any()),
      }),
      XastTextSchema,
      XastCommentSchema,
      XastInstructionSchema,
      XastCDataSchema,
    ]),
  ),
})

const FakeXastElementSchema = z.object({
  type: z.literal('element'),
  name: z.string(),
  attributes: z.union([XastAttributesSchema, z.undefined()]).optional(),
  children: z.array(
    z.union([
      FakerXastElementSchema,
      XastTextSchema,
      XastCommentSchema,
      XastInstructionSchema,
      XastCDataSchema,
    ]),
  ),
})

export const XastElementSchema = z.object({
  type: z.literal('element'),
  name: z.string(),
  attributes: z.union([XastAttributesSchema, z.undefined()]).optional(),
  children: z.array(
    z.union([
      FakeXastElementSchema,
      XastTextSchema,
      XastCommentSchema,
      XastInstructionSchema,
      XastCDataSchema,
    ]),
  ),
})

const XastTextElementSchema = XastElementSchema.extend({
  children: z.tuple([XastTextSchema]),
})

export const NameSchema = XastElementSchema.extend({
  name: z.literal('name'),
  children: z.tuple([
    z.object({
      type: z.literal('text'),
      value: z.string(),
    }),
  ]),
})

export const AssertionNameSchema = z.union([
  z.literal('fundgroup'),
  z.literal('funder_identifier'),
  z.literal('funder_name'),
  z.literal('award_number'),
])

export const AssertionProviderSchema = z.union([z.literal('publisher'), z.literal('crossref')])

/** FundRef attributes included in assertion are:
 * fundgroup: used to group funding info for items with multiple funding sources. Required for items with multiple award_number assertions, optional for items with a single award_number
 * funder_identifier: funding agency identifier, must be nested within the funder_name assertion
 * funder_name: name of the funding agency (required)
 * award_number: grant number or other fund identifier
 **/
export const AssertionSchema: z.ZodSchema<Assertion> = z.lazy(() =>
  XastElementSchema.extend({
    type: z.literal('element'),
    name: z.literal('assertion'),
    attributes: z.object({
      name: AssertionNameSchema,
      provider: AssertionProviderSchema,
    }),
    children: z.array(AssertionSchema),
  }),
)

/** FundRef documentation and examples: http://help.crossref.org/#fundref
 * As part of CrossMark metadata, a deposit may contain what is called FundRef info. This details the funding behind a published article. The schema is a sequence of nested <assertion> tags.
 * If a DOI is not participating in CrossMark, FundRef data may be deposited as part of the <journal_article> metadata.
 * Note: Some rules will be enforced by the deposit logic (e.g. not the schema).
 * FundRef data includes one or more award numbers (award_number), each of which may have one or more funders (funder_name). Each funder may have one or more optional identifiers (funder_identifier).
 * A FundRef deposit begins with a <fr:program> tag within the <crossmark> structure (where fr is the namespace for the FundRef program).
 * The <program> element is an implicit funder_group and will typically contain:
 * A) one or more funder_name assertions and an award_number assertion.
 * or
 * B) one or more funder_group assertions where each funder_group should contain one or more funder_name assertions and at least one award_number assertion.
 * Multiple 'award_number's may be included in a single program or fundgroup. Deposits without an award_number will be accepted, but award_number should be provided whenever possible. Items with several award numbers associated with a single funding organization should be grouped together by enclosing the "funder_name", "funder_identifier", and award_number(s) within a "fundgroup" assertion.
 **/
export const ProgramSchema = XastElementSchema.extend({
  type: z.literal('element'),
  name: z.literal('program'),
  attributes: z.object({
    name: z.string(),
  }),
  children: z.array(AssertionSchema),
})
